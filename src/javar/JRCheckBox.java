/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * XmlTextField.java
 *
 * Created on 01-abr-2012, 8:55:27
 */
package javar;

import java.util.HashMap;
import javax.swing.AbstractButton;
import org.iesapp.framework.util.CoreCfg;

/**
 *
 * @author Josep
 */
public class JRCheckBox extends javax.swing.JPanel implements JRComponent {
    private String id="";
    private boolean required = false;
    private boolean selectable = false;
    private String selectionFieldName;
    private boolean addtomap;
    private String initialValue;
    private CoreCfg coreCfg;
    /** Creates new form XmlTextField */
    public JRCheckBox() {
        
        initComponents();
       
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();

        setOpaque(false);

        jCheckBox1.setName("jCheckBox1"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 2, Short.MAX_VALUE)
                .addComponent(jCheckBox1))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    // End of variables declaration//GEN-END:variables

    public void setValue(String value) {
        jCheckBox1.setSelected(value!=null && !value.isEmpty());
        initialValue = jCheckBox1.isSelected()?"X":"";
    }

    public String getValue() {
        return jCheckBox1.isSelected()?"X":"";
    }

    public boolean check() {        
        return true;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id=id;
    }

    public void setEnable(boolean enabled) {
        jCheckBox1.setEnabled(enabled);
    }

    public void focus() {
        jCheckBox1.requestFocusInWindow();
    }

    public void setRequired(boolean required) {
        this.required=required;
    }

    public boolean isRequired() {
       return this.required;
    }

    public void setLabel(String label) {
       jCheckBox1.setText(label);
    }

    public void setSelectable(boolean selectable, String selectionFieldName) {
        this.selectable = false;
        this.selectionFieldName = null;
    }

    public boolean isSelectable() {
       return false;
    }

    public AbstractButton getRadioButton() {
        return jCheckBox1;
    }

    public boolean isSelected() {
        return jCheckBox1.isSelected();
    }

    public String getSelectionFieldName() {
        return selectionFieldName;
    }

    public void setSelectionFieldName(String name) {
        this.selectionFieldName = name;
    }
    
    public void setSelected(boolean selected) {
        jCheckBox1.setSelected(selected);
         
    }

   public void setIniParams(HashMap<String,Object> params) {
        //
    }
   
     public boolean isAddToMap() {
        return addtomap;
    }

    public void setAddToMap(boolean settomap) {
        addtomap = settomap;
    }

    public boolean hasChanged() {
        return !(initialValue.equals(this.getValue()));
    }

    @Override
    public void setCoreCfg(CoreCfg coreCfg) {
        this.coreCfg = coreCfg;
    }
}
