/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package javar;

import com.toedter.calendar.IDateEvaluator;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Josep
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        this.jRCalendarTableView1.getMultiMonthCalendar().setnMonths(4);
       
        ArrayList<Date> list1 = new ArrayList<Date>();
        ArrayList<Date> list2 = new ArrayList<Date>();
        
        Calendar cal = Calendar.getInstance();
        
        for(int i =0; i<10; i++)
        {
        cal.add(Calendar.DAY_OF_MONTH, +1);
        list1.add(cal.getTime());
        list2.add(cal.getTime());
        cal.add(Calendar.DAY_OF_MONTH, +1);
        list2.add(cal.getTime());
       
        }
        
        this.jRCalendarTableView1.addDateEvaluator(new MyDateEvaluator(list1, Color.GREEN, "Hello"));
        this.jRCalendarTableView1.addDateEvaluator(new MyDateEvaluator(list2, Color.BLUE, "World"));     
        
        this.jRCalendarTableView1.setModelTable1(new DefaultTableModel(
                new Object[][]{},
                new String[]{"id","Date"}));        
        
        this.jRCalendarTableView1.registerType("PROVA", Color.GREEN);
     }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRCalendarTableView1 = new javar.JRCalendarTableView(){
            public void fillTable()
            {
                if(this.view==JRCalendarTableView.COMPOUNDVIEW)
                {
                    this.clearTable();
                    modelTable1.addRow(new Object[]{1, "canvi de vista"});
                }
                else
                {
                    this.clearTable();
                    modelTable1.addRow(new Object[]{1, "tots"});
                }
            }
        };

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("javar/javarbundle"); // NOI18N
        jRCalendarTableView1.setToolTipText(bundle.getString("January")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRCalendarTableView1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRCalendarTableView1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javar.JRCalendarTableView jRCalendarTableView1;
    // End of variables declaration//GEN-END:variables

     

    private static class MyDateEvaluator implements IDateEvaluator {
        private final List<Date> list;
        private final Color color;
        private final String msg;
      
        public MyDateEvaluator(List<java.util.Date> list, Color color, String msg) {
            this.list = list;
            this.color = color;
            this.msg = msg;
        }

            @Override
            public boolean isSpecial(Date date) {
               Calendar tmp1 = Calendar.getInstance();
               tmp1.setTime(date);
               boolean exists = false;
               for(Date d: list)
               {
                   Calendar tmp2 = Calendar.getInstance();
                   tmp2.setTime(d);
                   
                   if(tmp1.get(Calendar.DAY_OF_YEAR)==tmp2.get(Calendar.DAY_OF_YEAR) &&
                      tmp1.get(Calendar.YEAR)==tmp2.get(Calendar.YEAR) )
                   {
                       exists = true;
                       break;
                   }
                   
               }
               return exists;
            }

            @Override
            public Color getSpecialForegroundColor() {
                return Color.BLACK;
            }

            @Override
            public Color getSpecialBackroundColor() {
                return color;
            }

            @Override
            public String getSpecialTooltip() {
                return msg;
            }

            @Override
            public boolean isInvalid(Date date) {
                return false;
            }

            @Override
            public Color getInvalidForegroundColor() {
                return Color.GRAY;
            }

            @Override
            public Color getInvalidBackroundColor() {
                return Color.WHITE;
            }

            @Override
            public String getInvalidTooltip() {
                return "Festiu";
            }
        }
}
