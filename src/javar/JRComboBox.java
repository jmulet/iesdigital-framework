/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * XmlTextField.java
 *
 * Created on 01-abr-2012, 8:55:27
 */
package javar;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JRadioButton;
import org.iesapp.framework.util.CoreCfg;
import org.iesapp.util.StringUtils;

/**
 *
 * @author Josep
 */
public class JRComboBox extends javax.swing.JPanel implements JRComponent {
    private String id="";
    private boolean required = false;
    private boolean selectable = false;
    private String selectionFieldName;
    private HashMap<String, Object> inimap;
    private DefaultComboBoxModel modelCombo1;
    private boolean addtomap;
    private String initialValue;
    private boolean initialSelection;
    private CoreCfg coreCfg;
    
    /** Creates new form XmlTextField */
    public JRComboBox() {
        
        initComponents();
        jRadioButton1.setVisible(selectable);
        modelCombo1 = new DefaultComboBoxModel();
        jComboBox1.setModel(modelCombo1);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jComboBox1 = new javax.swing.JComboBox();

        setOpaque(false);

        jLabel1.setText("jLabel1");
        jLabel1.setName("jLabel1"); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(200, 14));

        jRadioButton1.setName("jRadioButton1"); // NOI18N
        jRadioButton1.setOpaque(false);
        jRadioButton1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButton1StateChanged(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.setName("jComboBox1"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton1)
                .addGap(6, 6, 6)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, 0, 186, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(1, 1, 1))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButton1StateChanged
        jComboBox1.setVisible(jRadioButton1.isSelected());
    }//GEN-LAST:event_jRadioButton1StateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton jRadioButton1;
    // End of variables declaration//GEN-END:variables

    public void setValue(String value) {
        
        initialValue = value;
        
        if(inimap.containsKey("return") && inimap.get("return").equals("key"))
        {
            int idx = -1;
            for(int i=0; i<modelCombo1.getSize(); i++)
            {
                if(((String) modelCombo1.getElementAt(i)).contains("["+value+"]"))
                {
                    idx = i;
                    break;
                }
            }
            if(idx>=0)
            {
                jComboBox1.setSelectedIndex(idx);
            }
        }
        else if(inimap.containsKey("return") && inimap.get("return").equals("value"))
        
        {
            for(int i=0; i<modelCombo1.getSize(); i++)
            {
                if(((String) modelCombo1.getElementAt(i)).contains(value))
                {
                    jComboBox1.setSelectedIndex(i);
                    break;
                }
            }
            
        }
        else
        {
            jComboBox1.setSelectedItem(value);
        }
        
    }

    public String getValue() {
        String value = (String) jComboBox1.getSelectedItem();
        if(inimap.containsKey("return") && inimap.get("return").equals("key"))
        {
            value = StringUtils.AfterLast(value, "[");
            value =  StringUtils.BeforeFirst(value, "]").trim();
        }
        else if(inimap.containsKey("return") && inimap.get("return").equals("value"))
        {
            value = StringUtils.BeforeLast(value, "[");
            value = StringUtils.AfterFirst(value, ">").trim();            
        }
        return value;
    }

    public boolean check() {
        boolean check = true;        
        if (required) {
            check = !getValue().trim().isEmpty();
        }
         
        if(!check)
        {
            jLabel1.setBackground(Color.red);
            jLabel1.setOpaque(true);
        }
        else
        {
            jLabel1.setOpaque(false);
        }
        jLabel1.repaint();
        return check;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id=id;
    }

    public void setEnable(boolean enabled) {
        jComboBox1.setEnabled(enabled);
        jRadioButton1.setEnabled(enabled);
    }

    public void focus() {
        jComboBox1.requestFocusInWindow();
    }

    public void setRequired(boolean required) {
        this.required=required;
    }

    public boolean isRequired() {
       return this.required;
    }

    public void setLabel(String label) {
        this.jLabel1.setText(label);
    }

    public void setSelectable(boolean selectable, String selectionFieldName) {
        this.selectable = selectable;
        this.selectionFieldName = selectionFieldName;
        jRadioButton1.setVisible(selectable);
        if(selectable)
        {
            jComboBox1.setVisible(jRadioButton1.isSelected());
        }
    }

    public boolean isSelectable() {
       return selectable;
    }

    public JRadioButton getRadioButton() {
        return jRadioButton1;
    }

    public boolean isSelected() {
        return jRadioButton1.isSelected();
    }

    public String getSelectionFieldName() {
        return selectionFieldName;
    }

    public void setSelectionFieldName(String name) {
        this.selectionFieldName = name;
    }
    
    public void setSelected(boolean selected) {
        initialSelection = selected;
        jRadioButton1.setSelected(selected);
        jComboBox1.setVisible(selected);
    }

    public void setIniParams(HashMap<String,Object> params) {
        inimap = params;
        modelCombo1 = new DefaultComboBoxModel();
        //System.out.println(params.toString());
        if(inimap.containsKey("fillwith"))
        {
            
            //if(inimap.get("fillwith").getClass().equals(ArrayList.class))
            //System.out.println("fillwidth  is = "+inimap.get("fillwith"));
            {
                ArrayList<String> list = (ArrayList<String>) inimap.get("fillwith");
                //System.out.println("list is="+list.toString());
                for(String s: list)
                {
                    modelCombo1.addElement(s);
                }
                list.clear();
                list=null;
                jComboBox1.setModel(modelCombo1);
            }
        }
    }
    
    public boolean isAddToMap() {
        return addtomap;
    }

    public void setAddToMap(boolean settomap) {
        addtomap = settomap;
    }

    public boolean hasChanged() {
        return (!(initialValue.equals(this.getValue())) || (initialSelection!=this.isSelected()));
    }
    
     @Override
    public void setCoreCfg(CoreCfg coreCfg) {
        this.coreCfg = coreCfg;
    }
}
