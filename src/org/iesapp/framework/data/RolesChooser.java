/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.iesapp.framework.data;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import org.iesapp.database.MyDatabase;
import org.iesapp.framework.util.CoreCfg;
import org.iesapp.util.StringUtils;

/**
 *
 * @author Josep
 */
public class RolesChooser extends javar.JRDialog {

    public static byte CHOOSER_ROLES = 1;
    public static byte CHOOSER_ACCEPT = 2;
    public static byte CHOOSER_CANCEL = 3;
    private byte exitCode = CHOOSER_CANCEL;
    private DefaultListModel modelList1;
    private final String selection;
    private static DefaultListModel MODEL_ROLES = null;
    private final CoreCfg coreCfg;

    
    /**
     * Creates new form AmbitsChooser
     */
    public RolesChooser(java.awt.Frame parent, String selection, CoreCfg coreCfg) {
        super(parent, true);
        this.coreCfg = coreCfg;
        this.selection = selection;
        initComponents();
        modelList1 = null;
        modelList1 = getModelRoles(coreCfg.getMysql());
        jLabel2.setText("Roles");

        
       
        jList1.setModel(modelList1);
        //Parse input selection
        if(selection==null || selection.trim().isEmpty())
        {
            selection = "*";
        }
        ArrayList<String> parsed = StringUtils.parseStringToArray(selection, ",", StringUtils.CASE_INSENSITIVE);
        int[] sel = new int[parsed.size()];
        int pos = 0;
        for(String s: parsed)
        {
            int idx = modelList1.indexOf(s);
            if(idx>=0)
            {
            sel[pos] = idx;
            pos += 1;
            }
        }
        jList1.setSelectedIndices(sel);
        
    }

    
    public byte showModal()
    {
        this.setVisible(true);
        return this.getExitCode();
    }
    
    public String getSelection()
    {
        int[] selectedIndices = jList1.getSelectedIndices();
        if(selectedIndices.length==0)
        {
            return "*";
        }
        StringBuilder sbuilder = new StringBuilder();
        
        sbuilder.append(modelList1.getElementAt(selectedIndices[0]));
        
        for(int i=1; i<selectedIndices.length; i++)
        {
            sbuilder.append(",").append(modelList1.getElementAt(selectedIndices[i]));
        }
       
        return sbuilder.toString();  
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setTitle("Chooser");
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("Choose:");

        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("jLabel2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        exitCode = CHOOSER_CANCEL;
        this.setVisible(false);
    }//GEN-LAST:event_formWindowLostFocus

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        exitCode = CHOOSER_CANCEL;
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        if(jList1.getSelectedIndices().length==0)
        {
            return;
        }
        
        exitCode = CHOOSER_ACCEPT;
        
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public byte getExitCode() {
        return exitCode;
    }

    /**
     * Singleton provider
     * @return 
     */
    private static DefaultListModel getModelRoles(MyDatabase mysql) {
        if(MODEL_ROLES!=null)
        {
            return MODEL_ROLES;
        }
        
        MODEL_ROLES = new DefaultListModel();
        MODEL_ROLES.addElement("*");
        String SQL1 = "";
       
       
        SQL1 = "SELECT DISTINCT role FROM sig_grant_roles order by role";

//
//        SQL1 = "SELECT DISTINCT Estudis FROM " + CoreCfg.core_mysqlDBPrefix + ".xes_alumne_historic "
//                + " order by Estudis";

         try {
            Statement st = mysql.createStatement();
            ResultSet rs1 = mysql.getResultSet(SQL1,st);
            while (rs1 != null && rs1.next()) {
                MODEL_ROLES.addElement(rs1.getString(1));
            }
            if (rs1 != null) {
                rs1.close();
                st.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(RolesChooser.class.getName()).log(Level.SEVERE, null, ex);
        }
        return MODEL_ROLES;
    }
        
       
}
