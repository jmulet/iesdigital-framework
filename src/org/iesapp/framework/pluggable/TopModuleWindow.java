package org.iesapp.framework.pluggable;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import com.l2fprod.common.swing.StatusBar;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.help.CSH;
import javax.help.HelpSet;
import javax.help.HelpSetException;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.KeyStroke;
import org.iesapp.framework.pluggable.modulesAPI.BeanModule;
import org.iesapp.framework.pluggable.modulesAPI.UtilsFactory;
import org.iesapp.framework.pluggable.pluginsAPI.BeanAnchorPoint;
import org.iesapp.framework.pluggable.preferences.UserPreferencesBean;
import org.iesapp.framework.util.CoreCfg;
import org.iesapp.framework.util.JarClassLoader;
import org.iesapp.util.StringUtils;
import org.openide.util.Lookup;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;

/**
 *
 * @author Josep
 */
public class TopModuleWindow extends javax.swing.JPanel implements Lookup.Provider {

    protected boolean multipleInstance = true;
    protected boolean openingRequired = true;
    public Stamp stamper;
    public SysTray stray;
    public CoreCfg coreCfg;
    public Object initializationObject;
    protected String moduleName = "moduleName";
    protected String moduleDisplayName = "Basic Module";
    protected String moduleDescription = "A basic pluggable module by J. Mulet";
    protected Lookup defaultLookupRef;
    public static AbstractLookup globalLookup = null;
    public static InstanceContent globalContent = null;
    protected InstanceContent content;
    protected AbstractLookup moduleLookup;
    protected JarClassLoader moduleClassLoader;
    public IniParameters iniParameters = new IniParameters();
    protected BeanModule beanModule;
    protected ImageIcon PLUGIN_ICON
            = new ImageIcon(TopModuleWindow.class.getResource("/org/iesapp/framework/icons/plugin.gif"));
    private boolean firstCall = true;
    //Provides back control on UIFramework
    public UIFramework uiFramework;
    //STATUS FOR A MODULE
    public static final byte STATUS_NORMAL = 1;
    public static final byte STATUS_SLEEPING = 0;
    public static final byte STATUS_AWAKE = 2;
    protected byte moduleStatus = STATUS_NORMAL;
    private HelpSet moduleHelpSet;
    //PREFERENCES
    protected ArrayList<UserPreferencesBean> userModulePreferences = null;
    private final long startTime;

    //  protected ModuleClassLoader moduleClassLoader;
    /**
     * Creates new form TopWindow
     */
    public TopModuleWindow() {
        startTime = System.currentTimeMillis();
        
        initComponents();

        content = new InstanceContent();
        moduleLookup = new AbstractLookup(content);

        if (globalLookup == null) {
            globalContent = new InstanceContent();
            globalLookup = new AbstractLookup(globalContent);
//            Lookup.Result result = globalLookup.lookup(new Lookup.Template(TopModuleWindow.class));
//            result.addLookupListener(new LookupListener(){
//
//                @Override
//                public void resultChanged(LookupEvent le) {
//                    //System.out.println("Change in globalLookup: "+le);
//                }
//                
//            });
        }

    }

    public Container getContentContainer() {
        return this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    public final void initialize(Stamp stamper, CoreCfg coreCfg, UIFramework uiFramework) {
        //this.moduleClassLoader = moduleClassLoader;
        //Always create an instance of stamper
        this.coreCfg = coreCfg;
        this.stamper = stamper;
        this.uiFramework = uiFramework;
        if (stamper != null) {
            stamper.addModule(moduleName);
        }

        helpSetInitialization();
        postInitialize();
        loadPlugins();

    }

    public final void initialize(Stamp stamper, SysTray stray, CoreCfg coreCfg, UIFramework uiFramework) {
        this.stamper = stamper;
        this.coreCfg = coreCfg;
        this.uiFramework = uiFramework;
        if (stamper != null) {
            stamper.addModule(moduleName);
        }
        this.stray = stray;

        helpSetInitialization();
        postInitialize();
        loadPlugins();

    }

    public void postInitialize() {
        //Overridable method;
    }

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
    }//GEN-LAST:event_formComponentShown

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // dispose();
    }//GEN-LAST:event_formComponentHidden

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public String getModuleName() {
        return moduleName;
    }

    public Stamp getStamper() {
        return stamper;
    }

    public void setStamper(Stamp stamper) {
        this.stamper = stamper;
    }

    /**
     * Override this method to perform custom dispose operations
     * 
     **/
    public void beforeDispose() {
       //Override
    }

    public void dispose() {

        beforeDispose();

        if (globalLookup != null) {
            globalContent.remove(this);
        }

        if (moduleHelpSet != null) {
            coreCfg.getMainHelpSet().remove(moduleHelpSet);
        }
        
        //null point classLoader
        moduleClassLoader = null;
    }

    public void setModuleName(String moduleName) {
        this.moduleName = moduleName;
    }

    public String getModuleDisplayName() {
        return moduleDisplayName;
    }

    public void setModuleDisplayName(String moduleDisplayName) {
        this.moduleDisplayName = moduleDisplayName;
    }

    public String getModuleDescription() {
        return moduleDescription;
    }

    public void setModuleDescription(String moduleDescription) {
        this.moduleDescription = moduleDescription;
    }

    public void setMultipleInstance(boolean multipleInstance) {
        this.multipleInstance = multipleInstance;
    }

    public boolean isOpeningRequired() {
        return openingRequired;
    }

    public void associateLookup(Object object) {
        TopModuleWindow.globalContent.add(object);
    }

    @Override
    public Lookup getLookup() {
        return moduleLookup;
    }

    /**
     * Wrap TopContainer in a dockable one
     *
     * @param closeable
     * @return
     */
//    public DefaultSingleCDockable asSingleCDockable(String id, String displayname, boolean closeable)
//    {     
//        this.setOpaque(true);
//        DefaultSingleCDockable defaultSingleCDockable = new DefaultSingleCDockable(id, displayname, this);
//        defaultSingleCDockable.setTitleIcon(this.getModuleIcon());
//        defaultSingleCDockable.setCloseable(closeable);
//        return defaultSingleCDockable;
//     }
    //Must be overwritten
    public javax.swing.ImageIcon getModuleIcon() {
        return null;
    }

    public boolean isMultipleInstance() {
        return false;
    }

    public void refreshUI() {
    }

    //This method must be overwritten by the module 
    //it will set the menus that come from the module itself
    public void setMenus(JMenuBar jMenuBar1, JToolBar jToolbar1, StatusBar jStatusBar1) {
        //First I need to overwrite
        //There is a part that comes from getMenusFromPlugins        
    }

    //Never overwrite this method (this is the one used from the framework)
    public final void setMenuEntries(JMenuBar jMenuBar1, JToolBar jToolbar1, StatusBar jStatusBar1) {
        //First call the menu construction from module
        setMenus(jMenuBar1, jToolbar1, jStatusBar1);
        //After that, apply entries from plugins
        //This must be called only once
        if (firstCall) {
            setMenusFromPlugins(jMenuBar1, jToolbar1, jStatusBar1);
            firstCall = false;
        }
    }

    protected void setMenusFromPlugins(JMenuBar jMenuBar1, JToolBar jToolBar1, StatusBar jStatusBar1) {
        ActionListener listenerNewPlugin = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String classname = e.getActionCommand();
                int idx = -1;
                for (int i = 0; i < getBeanModule().getInstalledPlugins().size(); i++) {
                    if (getBeanModule().getInstalledPlugins().get(i).getClassName().equals(classname)) {
                        idx = i;
                        break;
                    }
                }
                if (idx >= 0) {
                    BeanModule beanPlugin = getBeanModule().getInstalledPlugins().get(idx);
                    //Do the magic here, create an instance and render the plugin to the correct location   
                    org.iesapp.framework.util.JarClassLoader.getInstance().addToClasspath(new java.io.File(CoreCfg.contextRoot + "\\modules\\" + beanPlugin.getJar()));
                    try {
                        
                        Class<?> forName = moduleClassLoader.loadClass(beanPlugin.getClassName());
                        TopPluginWindow plgWin = (TopPluginWindow) forName.newInstance();
                        plgWin.setBeanPlugin(beanPlugin);
                        plgWin.setInitializationObject(initializationObject);
                        plgWin.initialize(TopModuleWindow.this.getName(), stamper, stray, coreCfg);
                        plgWin.refreshUI();
                        displayPluginTopWindow(plgWin);
                        //DockingFrameworkApp.this.uiFramework.addTopModuleWindow(loadedModules.get(idx), true);
                    } catch (Exception ex) {
                        Logger.getLogger(TopModuleWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };

        if (getBeanModule() != null) {
            for (BeanModule plg : getBeanModule().getInstalledPlugins()) {
                if (!plg.isEnabled()) {
                    continue;
                }

                if (!UtilsFactory.isModuleEnabled(plg, coreCfg.getUserInfo().getRole(), coreCfg.getUserInfo().getAbrev())) {
                    continue;
                }

                //Add link to respective anchor points
                for (BeanAnchorPoint bap : plg.getListAnchorPoints()) {
                    if (bap.getLocation().equals("toolbar")) {
                        JToolBar target = null;

                        int pos = WindowManager.findToolBarItemPos(jToolBar1, bap.getParentId());
                        if (pos >= 0) {
                            target = (JToolBar) jToolBar1.getComponent(pos);
                        } else {
                            target = new JToolBar();
                            target.setName(bap.getParentId());
                            jToolBar1.add(bap.getParentId(), target);
                        }

                        JButton button = new JButton();
                        //System.out.println("addding a icon "+plg.getModuleIcon24x24());
                        button.setIcon(plg.getModuleIcon24x24());
                        button.setActionCommand(plg.getClassName());
                        button.setToolTipText(plg.getNameForLocale(coreCfg.core_lang));
                        button.addActionListener(listenerNewPlugin);
                        target.add(button);
                    } else if (bap.getLocation().equals("menu")) {
                        //System.out.println("Trying to get location for "+bap.getParentId());
                        //TODO:: AIXO NO ME FUNCIONAVA!!!!!
                        JMenu target = (JMenu) WindowManager.getContainerObject(jMenuBar1, bap.getParentId());

                        JMenuItem menuitem = new JMenuItem();
                        menuitem.setText(plg.getNameForLocale(coreCfg.core_lang));
                        if (bap.isShowIcon()) {
                            menuitem.setIcon(plg.getModuleIcon24x24());
                        }

                        if (!plg.getShortcut().isEmpty()) {
                            String key = plg.getShortcut();

                            KeyStroke keyStroke = KeyStroke.getKeyStroke(key);
                            if (keyStroke != null) {
                                menuitem.setAccelerator(keyStroke);
                            }
                        }

                        menuitem.setActionCommand(plg.getClassName());
                        menuitem.addActionListener(listenerNewPlugin);
                        if (target != null) {
                            if (bap.getPos() < 0 || bap.getPos() >= target.getItemCount()) {
                                target.add(menuitem);
                            } else {
                                target.add(menuitem, bap.getPos());
                            }
                        } else {
                            //System.out.println("menu:: problem target is null");
                        }

                    } else {
                        //System.out.println("Unsupported anchor point");
                    }

                }
            }

        }

    }

    //overwrite this method to your needs
    public void displayPluginTopWindow(TopPluginWindow plgWin) {
        JDialog asJDialog = plgWin.asJDialog();
        asJDialog.setTitle(plgWin.getBeanPlugin().getClassName());
        asJDialog.setPreferredSize(new Dimension(200, 200));
        asJDialog.setLocationRelativeTo(null);
        asJDialog.setVisible(true);
    }

    /**
     * inicia els plugins
     */
    protected void loadPlugins() {
        if (getBeanModule() == null) {
            return;
        }

        //System.out.println("########################################");
        //System.out.println("LOADING PLUGINS for module....."+getBeanModule().getClassName()+"..."+getBeanModule().getInstalledPlugins().size()+" n. de plugins");
        //System.out.println("########################################");
        for (int i = 0; i < getBeanModule().getInstalledPlugins().size(); i++) {
            BeanModule plg = getBeanModule().getInstalledPlugins().get(i);
            //System.out.println("PLG is "+plg.getClassName());
            if (!plg.isEnabled()) {
                //System.out.println(" Skip "+plg.getClassName()+" because disabled");
                continue;
            }

            boolean mustskip = DockingFrameworkApp.pluginLoadPref.equalsIgnoreCase("no");
            if (mustskip) {
                //System.out.println(" Skip "+plg.getClassName()+" because policy of app");
                continue;
            }

            //Adds to classpath module jar
            File jarfile = new File(CoreCfg.contextRoot + File.separator + "modules" + File.separator + plg.getJar());
            moduleClassLoader.addToClasspath(jarfile);
            //Adds to classpath any other required lib for this module
            for (String s : plg.getRequiredLibs()) {
                moduleClassLoader.addToClasspath(new File(CoreCfg.contextRoot +  File.separator + "modules" + File.separator  + s));
            }

        }
    }

    public String getModuleVersion() {
        String version = "";
        if (getBeanModule() != null && getBeanModule().getBeanMetaINF() != null) {
            version = getBeanModule().getBeanMetaINF().getVersion();
        }
        return version;
    }

    public BeanModule getBeanModule() {
        return beanModule;
    }

    public void setBeanModule(BeanModule beanModule) {
        this.beanModule = beanModule;
    }

    public SysTray getStray() {
        return stray;
    }

    public void setStray(SysTray stray) {
        this.stray = stray;
    }

    public byte getModuleStatus() {
        return moduleStatus;
    }

    public void setModuleStatus(byte moduleStatus) {
        this.moduleStatus = moduleStatus;
    }

    public Object getInitializationObject() {
        return initializationObject;
    }

    public void setInitializationObject(Object initializationObject) {
        this.initializationObject = initializationObject;
    }

    public HelpSet getModuleHelpSet() {
        if (moduleHelpSet == null) {

            try {
                JarClassLoader systemClassLoader = JarClassLoader.getInstance();

                String path = "";
                if (beanModule.getHelpSetJar() != null && beanModule.getHelpSet() != null) {
                    File file = new File(CoreCfg.contextRoot + File.separator + "modules" + File.separator + beanModule.getHelpSetJar());
                    systemClassLoader.addToClasspath(file);
                    path = beanModule.getHelpSet();
                } else {
                    path = StringUtils.BeforeLast(this.getBeanModule().getClassName(), ".");
                    path = path.replaceAll("\\.", "/") + "/help/module.hs";
                }

                //System.out.println("PATH->"+path);
                //URL url = systemClassLoader.getResource(path);
                URL url = HelpSet.findHelpSet(systemClassLoader, path, Locale.getDefault());
                if (url != null) {
                    // URL url = mainHelpSet.findmainHelpSet(systemClassLoader, "/org/iesapp/modules/reserves/help/module.hs");
                    //System.out.println("URL->"+url);
                    moduleHelpSet = new HelpSet(systemClassLoader, url);
                    //System.out.println("mainHelpSet->"+moduleHelpSet);
                }
            } catch (HelpSetException ex) {
                Logger.getLogger(TopModuleWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return moduleHelpSet;
    }

    private void helpSetInitialization() {
        //build-in modules lack of a beanModule, so skip this
        if (this.beanModule == null) {
            return;
        }
        HelpSet moduleHelpSet1 = this.getModuleHelpSet();
        //System.out.println("Trying to initialize moduleHelpSet1 "+moduleHelpSet1);
        if (moduleHelpSet1 != null) {
            String path = StringUtils.BeforeLast(this.getBeanModule().getClassName(), ".");
            path = path.replaceAll("\\.", "-");
            //System.out.println("PATH->"+path); 
            boolean exists = false;
            Enumeration helpSets = coreCfg.getMainHelpSet().getHelpSets();
            while (helpSets.hasMoreElements()) {
                HelpSet nextElement = (HelpSet) helpSets.nextElement();

                if (path.equals(nextElement.getHomeID().toString())) {
                    exists = true;
                    break;
                }
            }
            if (!exists) {
                //System.out.println("ADDED helpset "+moduleHelpSet1+" to master");
                coreCfg.getMainHelpSet().add(moduleHelpSet1);
                CSH.setHelpIDString(this, path);
            }
        }
    }

    public UIFramework getUiFramework() {
        return uiFramework;
    }

    public void setUiFramework(UIFramework uiFramework) {
        this.uiFramework = uiFramework;
    }

    public ArrayList<UserPreferencesBean> getUserModulePreferences() {
        return userModulePreferences;
    }

    public JarClassLoader getModuleClassLoader() {
        return moduleClassLoader;
    }

    public void setModuleClassLoader(JarClassLoader moduleClassLoader) {
        this.moduleClassLoader = moduleClassLoader;
    }
    
    public long getUpTime()
    {
        return System.currentTimeMillis() - startTime;
    }

}
