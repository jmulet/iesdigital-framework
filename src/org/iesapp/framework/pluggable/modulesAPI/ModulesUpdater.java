/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.iesapp.framework.pluggable.modulesAPI;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import javax.swing.ButtonGroup;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.ParserConfigurationException;
import org.iesapp.framework.table.MyCheckBoxRenderer;
import org.iesapp.framework.util.CoreCfg;
import org.iesapp.framework.util.Unzip;
import org.iesapp.util.StringUtils;
import org.xml.sax.SAXException;

/**
 *
 * @author Josep
 */
public class ModulesUpdater extends javar.JRDialog {
    private DefaultTableModel modelTable1;
    private boolean updateAll;
    private HashMap<String, Repository> repository;

    /**
     * Creates new form ModulesUpdater
     */
    public ModulesUpdater(java.awt.Frame parent, boolean modal, String moduleName) {
        super(parent, modal);
        initComponents();
        ButtonGroup group1 = new ButtonGroup();
        group1.add(jRadioButton1);
        group1.add(jRadioButton2);
        jTextField1.setText(moduleName);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int col)
            {
                return col==0;
            }
        };
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Modules updater");

        jLabel1.setText("Place updates for your extensions  [ module (*.mod) and plugin (*.plg)  ]");

        jTextField1.setText(" ");

        jLabel3.setText("into folder  /installables");

        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Search updates for all extensions");

        jRadioButton2.setText("Search update for extension");

        modelTable1 = new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "", "Type", "in Application", "Extension", "Version", "Update to"
            }
        );
        jTable1.setModel(modelTable1);
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        JCheckBox jCheckBox0 = new JCheckBox();
        jTable1.getColumnModel().getColumn(0).setCellRenderer(new MyCheckBoxRenderer());
        jTable1.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(jCheckBox0));
        jTable1.setRowHeight(32);
        jTable1.getColumnModel().getColumn(2).setWidth(250);
        jTable1.getColumnModel().getColumn(3).setWidth(250);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Search for updates");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Update All");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Update Selected");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel4.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadioButton2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(68, 68, 68))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jRadioButton1)
                                    .addComponent(jLabel3))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton1)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jRadioButton2)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        lookForUpdates();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        updateAll = true;
        update();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       update();
    }//GEN-LAST:event_jButton4ActionPerformed

    public void update()
    {
        ArrayList<String> updatedExtensions = new ArrayList<String>();
        for(int i=0; i<jTable1.getRowCount(); i++)
        {
            boolean sel = (Boolean) jTable1.getValueAt(i, 0);
            if(updateAll || (!updateAll && sel))
            {
               String tipus = (String) jTable1.getValueAt(i, 1);
               int type = GenericFactory.MODULE;
               if(tipus.equalsIgnoreCase("PLUGIN"))
               {
                   type = GenericFactory.PLUGIN;
               }
               String extClassName = (String) jTable1.getValueAt(i, 3);
               String appClassName = (String) jTable1.getValueAt(i, 2);
               String version = (String) jTable1.getValueAt(i, 5);
               Repository repo = repository.get(extClassName);
               boolean already = updatedExtensions.contains(extClassName);
                try {
                    ModulesManager.update(new File(repo.getExtensionFileName()),
                      appClassName, type, extClassName, version, !already, !already);
                } catch (IOException ex) {
                    Logger.getLogger(ModulesUpdater.class.getName()).log(Level.SEVERE, null, ex);
                }
               updatedExtensions.add(extClassName);
            }
            
        }
        updatedExtensions.clear();
        jButton3.setEnabled(false);
        jButton4.setEnabled(false);
        jLabel4.setText("");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void lookForUpdates() {
        
        while(jTable1.getRowCount()>0)
        {
            modelTable1.removeRow(0);
        }
        //Check repository
        repository = getRepository();
        
        File file = new File(CoreCfg.contextRoot + "\\config");
        File[] appList = file.listFiles(new FileFilter() {

            @Override
            public boolean accept(File pathname) {
                return pathname.getAbsolutePath().endsWith(".xml");
                
            }
        });

        for(File app: appList)
        {
            try {
                GenericFactory gf = new GenericFactory(app);
                if(gf.getAppNode()==null)
                {
                    //This xml is not an application file
                    continue;
                }
                String appClass = gf.getApplicationAttribute("class");
                ArrayList<BeanModule> loadModules = gf.loadModules();
                for(BeanModule mod: loadModules)
                {
                    Repository inRepo = repository.get(mod.getClassName());
                    if(jRadioButton1.isSelected() || (jRadioButton2.isSelected() && jTextField1.getText().equals(mod.getClassName())))
                    {
                    if(inRepo!=null && StringUtils.compare(mod.getBeanMetaINF().getVersion(), inRepo.getVersion())<0)
                    {
                        modelTable1.addRow(new Object[]{false, "MODULE", appClass, mod.getClassName(), mod.getBeanMetaINF().getVersion(), inRepo.version});
                    }
             
                    for(BeanModule plg: mod.getInstalledPlugins())
                    {
                 
                          Repository inRepo2 = repository.get(plg.getClassName());
                          if(inRepo2!=null && StringUtils.compare(plg.getBeanMetaINF().getVersion(), inRepo2.getVersion())<0)
                          {
                              modelTable1.addRow(new Object[]{false, "PLUGIN", appClass, mod.getClassName()+"\\"+plg.getClassName(), plg.getBeanMetaINF().getVersion(), inRepo2.version});
                          }
                 
                    }
                    }
                }
            } catch (ParserConfigurationException ex) {
                Logger.getLogger(ModulesUpdater.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SAXException ex) {
                Logger.getLogger(ModulesUpdater.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ModulesUpdater.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        int nup = jTable1.getRowCount();
        jButton2.setEnabled(nup>0);
        jButton3.setEnabled(nup>0);
        if(nup>0)
        {
            jLabel4.setText(nup+" updates have been found.");
        }
        else
        {
            jLabel4.setText("No updates have been found.");

        }
    }
    
    
    
    public HashMap<String,Repository> getRepository()
    {
        HashMap<String, Repository> map = new HashMap<String, Repository>();
        
        File file = new File(CoreCfg.contextRoot + "\\installables");
        File[] repoList = file.listFiles(new FileFilter() {

            @Override
            public boolean accept(File pathname) {
                return pathname.getAbsolutePath().endsWith(".mod") || pathname.getAbsolutePath().endsWith(".plg");
                
            }
        });

        for(File f: repoList)
        {
             ArrayList<Repository> repository = getRepoFromExtension(f);
             for(Repository rep: repository)
             {
                  String key = rep.getModuleClassName();
                  if(map.containsKey(key))
                  {
                      //Check if this is newer version
                      String inmapVersion = map.get(key).getVersion();
                      String foundVersion = rep.getVersion();
                      if(StringUtils.compare(  inmapVersion, foundVersion )<0)
                      {
                          map.put(key, rep);
                      }
                  }
                  else
                  {                      
                      map.put(key, rep);
                  }
             }
        }
        
        return map;
    }

    private ArrayList<Repository> getRepoFromExtension(File f) {
        ArrayList<Repository> repo = new ArrayList<Repository>();
        try {
            ZipFile zip1 = new ZipFile(f);
            Enumeration<? extends ZipEntry> entries = zip1.entries();
            while(entries.hasMoreElements())
            {
                ZipEntry entry = entries.nextElement();
                if(entry.getName().endsWith(".jar"))
                {
                    File tmpDir = new File(System.getProperty("java.io.tmpdir")+"\\modulesUpdater");
                    tmpDir.delete();
                    tmpDir.mkdir();
                    InputStream inputStream = zip1.getInputStream(entry);
                    //extract this file to tmp dir
                    File tmpFile = new File(System.getProperty("java.io.tmpdir")+"\\modulesUpdater\\"+entry.getName());                    
                    Unzip.extract(inputStream, tmpFile);
                    ZipFile jarFile = new ZipFile(tmpFile);
                    ZipEntry entry1 = jarFile.getEntry("META-INF/module.xml");
                    if(entry1!=null)
                    {
                        InputStream inputStream1 = jarFile.getInputStream(entry1);
                        GenericFactory gen1 = new GenericFactory(inputStream1, GenericFactory.MODULE);
                        ArrayList<BeanModule> loadModules = gen1.loadModules();
                        for(BeanModule mod: loadModules)
                        {
                            Repository rep = new Repository(); 
                            rep.setExtensionFileName(f.getAbsolutePath());
                            rep.setModuleClassName(mod.getClassName());
                            rep.setJar(mod.getJar());
                            rep.setVersion(mod.getBeanMetaINF().getVersion());
                            repo.add(rep);
                        }
                        inputStream1.close();
                    }
                    else
                    {
                         ZipEntry entry2 = jarFile.getEntry("META-INF/plugin.xml");
                         if(entry2!=null)
                         {
                             InputStream inputStream1 = jarFile.getInputStream(entry2);
                             GenericFactory gen1 = new GenericFactory(inputStream1, GenericFactory.PLUGIN);
                             ArrayList<BeanModule> loadModules = gen1.loadModules();
                            for (BeanModule mod : loadModules) {
                                Repository rep = new Repository();
                                rep.setExtensionFileName(f.getAbsolutePath());
                                rep.setModuleClassName(mod.getClassName());
                                rep.setJar(mod.getJar());
                                rep.setVersion(mod.getBeanMetaINF().getVersion());
                                repo.add(rep);
                            }
                            inputStream1.close();
                        }
                    }
                    jarFile.close();
                    zip1.close();
                    tmpDir.delete();
                    break;
                }
                    
            }
        } catch (Exception ex) {
            Logger.getLogger(ModulesUpdater.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        
        return repo;
    }
}
