/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Autentificació.java
 *
 * Created on 03-jun-2011, 23:06:17
 */

package org.iesapp.framework.dialogs;
 
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.iesapp.clients.sgd7.profesores.BeanProfesor;
import org.iesapp.clients.sgd7.profesores.Profesores;
import org.iesapp.framework.util.CoreCfg;
import org.iesapp.util.StringUtils;

/**
 *
 * @author Josep
 */
public class Login extends javar.JRDialog implements LoginInterface{
    private int nintents;
    private boolean bloquejat = false;
    public static short TIMEOUT = 0;
    private int mode = 1;
    private boolean modifyUser = true;
    private String role;
    private final CoreCfg coreCfg;
    private int isValidated = 0;
    private String validpwd;
    private String professor;
    private String abrev;
    private java.awt.Image img;
    private String[] profes;

    /** Creates new form Autentificació */
    public Login(java.awt.Frame par, boolean modal, String title, String user, CoreCfg coreCfg) {
        super(par, modal);
        this.coreCfg = coreCfg;
        initComponents();
         
        
// Aquestes linies obtenen el nom de l'usuari windows.        
//        String osUser = "";
//        if(CoreCfg.osName.contains("Windows"))
//            osUser = new com.sun.security.auth.module.NTSystem().getName();        
//        //System.out.println(CoreCfg.osName+" windows user is " +osUser);
        
          
        DefaultComboBoxModel modelCombo1 = new DefaultComboBoxModel();
        modelCombo1.addElement("Tots");
        
        String SQL1 = "SELECT DISTINCT depart from sig_professorat where depart!='' order by depart";
       
        try {
            Statement st = coreCfg.getMysql().createStatement();
            ResultSet rs1 = coreCfg.getMysql().getResultSet(SQL1,st);
            while(rs1!=null && rs1.next())
            {
                modelCombo1.addElement( rs1.getString("depart") );
            }
            if(rs1!=null) {
                rs1.close();
                st.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        jComboBox1.setModel(modelCombo1);
        
        
        jLabel4.setText(CoreCfg.tipPasswd);
        jLabel5.setText(title);

        if(mode==0) {
            autoCompleteCombo1.setEnabled(false);
        } //we are in timeout mode, no change in user allowed

        nintents = 0;

        if( (new File("./loginlogo.gif")).exists() ) {
            img = (new javax.swing.ImageIcon("./loginlogo.gif")).getImage();
        }
        else {
            img = (new javax.swing.ImageIcon(getClass().getResource("/org/iesapp/framework/icons/login.jpg"))).getImage();
        }
        
        fillAutoComplete();

        if(!user.isEmpty())
        {
            int index = findAbrevInCombo(user);

            if(index>=0)
            {
                autoCompleteCombo1.setSelectedIndex(index);
                jPasswordField1.requestFocus();
            }
        }
        else
        {
            if(!CoreCfg.lastLogins.isEmpty())
            {
                int index = findAbrevInCombo(CoreCfg.lastLogins.get(0));

                if(index>=0)
                {
                    autoCompleteCombo1.setSelectedIndex(index);
                    jPasswordField1.requestFocus();
                }
            }
        }
    }

   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel(){
            public void paintComponent(Graphics g)
            {
                if(img!=null)
                {
                    Dimension size = new Dimension(img.getWidth(null), img.getHeight(null));
                    //Dimension size = new Dimension(1000,1000);
                    g.clearRect(0, 0, 1000, 1000);
                    setPreferredSize(size);
                    setMinimumSize(size);
                    setMaximumSize(size);
                    setSize(size);
                    //setLayout(null);
                    g.drawImage(img, 0, 0, null);
                }
                else
                {
                    Dimension size = new Dimension(550, 297);

                    setPreferredSize(size);
                    setMinimumSize(size);
                    setMaximumSize(size);
                    setSize(size);
                    g.setColor(Color.WHITE);
                    g.drawRect(0, 0, 550, 297);
                }
            }

            public void update(Graphics g){
                paint(g);
            }

        };
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        autoCompleteCombo1 = new org.iesapp.framework.util.AutoCompleteCombo();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/iesapp/framework/dialogs/Login"); // NOI18N
        setTitle(bundle.getString("auntentificacio")); // NOI18N
        setAlwaysOnTop(true);
        setIconImage(null);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setName("jPanel1"); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText(bundle.getString("usuari")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText(bundle.getString("contrasenya")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jPasswordField1.setName("jPasswordField1"); // NOI18N
        jPasswordField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPasswordField1KeyReleased(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/iesapp/framework/icons/login.gif"))); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jButton1.setText(bundle.getString("entra")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        autoCompleteCombo1.setName("autoCompleteCombo1"); // NOI18N
        autoCompleteCombo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoCompleteCombo1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 3, 24)); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setText(bundle.getString("departament")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.setName("jComboBox1"); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(238, 238, 238)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addComponent(autoCompleteCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, 0, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(autoCompleteCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jPasswordField1, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        nintents +=1;
        checkValidity();
}//GEN-LAST:event_jButton1ActionPerformed

    private void jPasswordField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordField1KeyReleased
        int key = evt.getKeyCode();

        if (key == KeyEvent.VK_ENTER) {
             nintents += 1;
             checkValidity();
        }
}//GEN-LAST:event_jPasswordField1KeyReleased

    private void autoCompleteCombo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoCompleteCombo1ActionPerformed
       jPasswordField1.setText("");
    }//GEN-LAST:event_autoCompleteCombo1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(mode==TIMEOUT) {
            return;
        }
        isValidated = 0;
        this.setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    
    private void fillAutoComplete()
    {
        int iddepart = jComboBox1.getSelectedIndex();
        String depart = (String) jComboBox1.getSelectedItem();
                
        ArrayList<String> listProfes = new  ArrayList<String>();
        
        String condition = "";
        if(iddepart>0) {
            condition = " WHERE depart='"+depart+"'";
        }
        
        HashMap<String,String> mapProf = new HashMap<String,String>();
        String SQL1 = "SELECT * FROM sig_professorat "+condition;
       
        try {
               Statement st = coreCfg.getMysql().createStatement();
            ResultSet rs1 = coreCfg.getMysql().getResultSet(SQL1,st);
            while(rs1!=null && rs1.next())
            {
                mapProf.put(rs1.getString("abrev"),rs1.getString("nombre"));
            }
            if(rs1!=null) {
                rs1.close();
                st.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        mapProf = StringUtils.getSortedMap(mapProf);
        
        if(iddepart==0)
        {
                //Primer afegeixo a la llista els usuaris més comuns
                for(int i=0; i<CoreCfg.lastLogins.size(); i++)
                {
                    String ky = CoreCfg.lastLogins.get(i);
                    if(ky.equals("ADMIN"))
                    {
                         listProfes.add("ADMINISTRADOR [ADMIN]");
                    }
//                    else if(ky.equals("PREF"))
//                    {
//                         listProfes.add("PREFECTURA [PREF]");
//                    }
                    else if(ky.equals("GUARD"))
                    {
                         listProfes.add("GUARDIES [GUARD]");
                    }
                    else
                    {
                        if(mapProf.containsKey(ky)) {
                        listProfes.add(mapProf.get(ky)+ " ["+ky+"]");
                    }
                    }
                }
        }

        //ara segueixo amb els altres del mapa sempre i quan no estiguin inclosos ja
        for(String ky: mapProf.keySet())
        {

            String aux = mapProf.get(ky)+ " ["+ky+"]";
            if(!listProfes.contains(aux)) {
                listProfes.add(aux);
            }
        }

        //afegeix uns usuaris especials
        if(iddepart==0)
        {
            String aux = "ADMINISTRADOR [ADMIN]";
            if(!listProfes.contains(aux)) {
                listProfes.add(aux);
            }

//            aux = "PREFECTURA [PREF]";
//            if(!listProfes.contains(aux))
//                    listProfes.add(aux);

            aux = "GUARDIES [GUARD]";
            if(!listProfes.contains(aux)) {
                listProfes.add(aux);
            }
        }
        
        profes = new String[listProfes.size()];
        for (int i=0;i<listProfes.size();i++) {
            profes[i]= listProfes.get(i);
        }

        listProfes.clear();

        //for(int i=0; i<profes.length; i++) //System.out.println(profes[i]);
        
        autoCompleteCombo1.setText("");
        autoCompleteCombo1.setData(profes);
    }
            
    
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
            fillAutoComplete();
            
    }//GEN-LAST:event_jComboBox1ActionPerformed

    public void setMode(int num)
    {
        this.mode = num;
    }

     private void checkValidity()
     {
        searchPwd();
        if(bloquejat)
        {
              Toolkit.getDefaultToolkit().beep();
              JOptionPane.showMessageDialog(this, "Per motius de manteniment, aquest compte\n d'usuari ha estat bloquejat.\nDisculpau les molèsties.");
              return;
        }

        if(validpwd == null)
        {
            return;
        }
        String entrat = new String(jPasswordField1.getPassword());
       
        if( entrat.equals(validpwd) || entrat.equals(CoreCfg.core_pwdSU) )  //permet entrar com tot ususari amb password d'administrador
        {
            
            professor = autoCompleteCombo1.getText();
            isValidated = 1;
       
            if (mode != TIMEOUT) {
                //save ini file
                if (professor.contains("[") && professor.contains("]")) {
                    abrev = StringUtils.AfterLast(professor, "[");
                    abrev = StringUtils.BeforeLast(abrev, "]");
                    abrev = abrev.trim().toUpperCase();
                    if (!CoreCfg.lastLogins.contains(abrev)) {
                        CoreCfg.lastLogins.add(0, abrev);
                    } else {
                        CoreCfg.lastLogins.remove(abrev);
                        CoreCfg.lastLogins.add(0, abrev);
                    }

                    String aux = "";
                    if (CoreCfg.lastLogins != null) {
                        int nmax = CoreCfg.lastLogins.size() < 6 ? CoreCfg.lastLogins.size() : 5;
                        for (int i = 0; i < nmax; i++) {
                            aux += CoreCfg.lastLogins.get(i) + ",";
                        }

                        aux = StringUtils.BeforeLast(aux, ",");
                    }
                    coreCfg.setUserPreferences("lastLogin", aux);
                    //coreCfg.setUserPreferences("lastLogin", aux);
                    coreCfg.saveIniProperties();
               }
            }

            this.setVisible(false);
            
        }
        else
        {
            int queden = 4-nintents;
            if(queden>0)
            {
                //autoCompleteCombo1.requestFocus();
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, "Les credencials són incorrectes.\nVos queden "+queden+" intents.");
                jPasswordField1.setText("");
                jPasswordField1.requestFocus();
            }
            else
            {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, "Heu exhaurit el nombre màxim d'intents.\nEl programa es tancarà.");
                jPasswordField1.setText("");
                coreCfg.getMysql().close();
                isValidated = -1;
                setVisible(false);

            }
        }
      
    }


    public boolean pwdRequired()
    {
        searchPwd();
        return (validpwd == null? false : !validpwd.isEmpty());
    }

    public void searchPwd()
    {
        validpwd = null;

        String txt = autoCompleteCombo1.getText();
        String abrev = "";
        if(txt.contains("[") && txt.contains("]"))
        {
            abrev = StringUtils.AfterLast(txt, "[");
            abrev = StringUtils.BeforeLast(abrev, "]");
            abrev = abrev.trim().toUpperCase();
        }
        else
        {
            return;
        }

        if(abrev.equals("ADMIN"))
        {
                validpwd = CoreCfg.core_pwdSU;
                return;
        }
//        else if(abrev.equals("PREF"))
//        {
//               validpwd = CoreCfg.core_pwdPREF;
//                return;
//        }
        else if(abrev.equals("GUARD"))
        {
               validpwd = CoreCfg.core_pwdGUARD;
                return;
        }



        String SQL1 = "SELECT * FROM usu_usuari WHERE nom='" + abrev + "'";



        
        try {
                Statement st = coreCfg.getMysql().createStatement();
                ResultSet rs1 = coreCfg.getMysql().getResultSet(SQL1,st);
                if(rs1 != null && rs1.next()) {
                    validpwd = rs1.getString("contrasenya");
                    bloquejat = rs1.getInt("bloquejat")>0;
                    role = rs1.getString("GrupFitxes");
                }
                if(rs1 != null) {
                rs1.close();
                st.close();
            }
            }catch (SQLException ex) {
                 //System.out.println(ex);
            }


    }

    private int findAbrevInCombo(String user) {
         int index = -1;
            for(int k=0; k<profes.length; k++)
            {
                if(profes[k].contains("["+user+"]"))
                {
                    index=k;
                    break;
                }
            }
         return index;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.iesapp.framework.util.AutoCompleteCombo autoCompleteCombo1;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordField1;
    // End of variables declaration//GEN-END:variables
   
   

    /**
     * @return the modifyUser
     */
    public boolean isModifyUser() {
        return modifyUser;
    }

    /**
     * @param modifyUser the modifyUser to set
     */
    public void setModifyUser(boolean modifyUser) {
        this.modifyUser = modifyUser;
        jComboBox1.setEnabled(modifyUser);
        autoCompleteCombo1.setEditable(modifyUser);
        autoCompleteCombo1.setEnabled(modifyUser);
    }

    @Override
    public String getAbrev() {
        return abrev;
    }

    @Override
    public String getPwd() {
        return validpwd;
    }

    @Override
    public int getValidation() {
        return isValidated;
    }

    @Override
    public BeanProfesor getProfesor() {
        Profesores bean = new Profesores();
        bean.loadByAbrev(abrev);
        return bean;
    }
    
    @Override
    public void display()
    {       
         this.setLocationRelativeTo(null);
         this.setModal(true);
         this.setVisible(true); 
    }

    @Override
    public String getRole() {
        return role;
    }
}
